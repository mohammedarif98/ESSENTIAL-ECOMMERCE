const orderPayment = async(req,res)=>{
    try{
        const userId = req.session.user_id;
        const user = await User.findById(req.session.user_id);
        const cart = await User.findById(req.session.user_id, { cart: 1, _id: 0 });
        
        // Check if COD is selected as the payment option
        if (req.body.payment_option === "COD") {
        // Create a new order
        const order = new Order({
            userId: userId,
            quantity: req.body.quantity,
            price: req.body.price,
            products: cart.cart,
            totalAmount: req.body.total,
            shippingAddress: JSON.parse(req.body.address),
            paymentDetails: req.body.payment_option,
      
        });

        const orderSuccess = await order.save();
        
        if(orderSuccess){
            // Make the cart empty
            await User.updateOne({ _id:userId},{$unset:{cart: 1}});

            // Update product quantities
            for(const cartItem of user.cart){
                const product = await Product.findById(cartItem.productId);
                if(product){
                    product.quantity -= cartItem.quantity;
                    await product.save();
                    console.log("Quantity decreased");
                }
            }

            res.status(200).json({status: true,msg: "Order created for COD",orderId: order._id});
        }
        // Handle Razorpay payment option here
        }else if(req.body.payment_option === 'razorpay'){
            // create a new order for razorpay
            const order = new Order({
                userId: userId,
                quantity: req.body.quantity,
                price: req.body.price,
                products: cart.cart,
                totalAmount: req.body.total,
                shippingAddress: JSON.parse(req.body.address),
                paymentDetails: req.body.payment_option,
          
            });
            const orderSuccess = await order.save();
            
            if(orderSuccess){
                await User.updateOne({_id:userId},{$unset:{cart:1}});
                // update product quantities
                for(let cartItem of user.cart){
                    const product = await Product.findById(cartItem.productId);
                    if(product){
                        product.quantity -= cartItem.quantity;
                        await product.save();
                        console.log("Quantity decreased");
                    } 
                }
                // Send the order ID and other details to the client for Razorpay
                res.status(200).json({
                    status: true,
                    msg: "Order created for Razorpay",
                    orderId: order._id,
                    totalAmount: order.totalAmount * 100, // Convert amount to paisa for Razorpay
                    receipt: String(order._id),
                    currency: "INR", // Change to appropriate currency if needed
                });
            }
            }else{
                // Handle other payment options here
                console.log("Invalid payment option");
                res.status(400).json({ error: "Invalid payment option" });
            }
    }catch(error){
        console.log('error found in payment')
        res.status(500).send("Internal Server Error");
    }
}